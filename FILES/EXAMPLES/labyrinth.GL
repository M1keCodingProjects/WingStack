make W := 15;
make H := 13;

make H_SIDE_MAP := "══" "  ";
make V_SIDE_MAP := "║ " "  ";
make MOVES := [W -1 * 2] [1 3] [W 0] [-1 1];
make CORNER_MAP := "╬╣╩╝╠║╚ ╦╗═ ╔   " spill;

make maze :[bin|void]= [];
loop H W * then make maze[maze spill size] = b0;

make current  := 0;
make currentX := 0;
make currentY := 0;

if TRUE loop {
  # rendering
  make mazeRender := "$<display:block; line-height:1rem;>";
  make bbRender := "";
  make y := 0;
  loop H {
    make topRender := "";
    make bottomRender := "";
    make cellID := 0;
    make cells  := b1111;
    make x := 0;
    loop W {
      cellID = y W * x +;
      cells  = b11 maze[cellID][3] maze[cellID][0] bin;
      if x then cells[2] = maze[cellID W 1 + -][2];
      if y then cells[3] = maze[cellID W -][3];

      topRender    += CORNER_MAP[cells int] H_SIDE_MAP[cells[0] int] str;
      bottomRender += V_SIDE_MAP[cells[1] int] [" " "$<color:red>#<$>"][cellID current == int] str;
      
      if y H 1 - == {
        bbRender += CORNER_MAP[maze[cellID][3] x not b10 bin int] H_SIDE_MAP[0] str;
      }
    
      x++;
    }
    
    topRender    += CORNER_MAP[y not cells[0] 0 1 bin int] str;
    bottomRender += "║";
    mazeRender   += topRender "&EOL" bottomRender "&EOL" str;
    y++;
  }
  print "\clear";
  print mazeRender bbRender "╝<$>" str;

  # advance through the maze
  make moveID :int|str = 0;
  make moveIsVert :bin = FALSE;
  if TRUE loop {
    moveID = inp;
    if moveID "exit" == then exit;
    
    moveIsVert = moveID 2 % not;
    if moveID dup 0 < swap 3 > or {
      print "Valid moves are: 0:up, 1:right, 2:down, 3:left .";
      next;
    }
    
    if currentX not moveID 3 == and currentX W 1 - == moveID 1 == and or
       currentY not moveID 0 == and currentY H 1 - == moveID 2 == and or or
    {
      print "Cannot move outside of labyrinth bounds!";
      next;
    }
    
    exit;
  }
  
  if moveID "exit" == then exit;
  make move := MOVES[moveID];
  maze[current] |= b1 moveID <<;
  
  current  += move[0];
  currentX += moveIsVert not int;
  currentY += moveIsVert     int;
  
  maze[current] |= b1 move[1] <<;
}

print "Thanks for playing!";