# Initialize data
make const boardData       := 0 0 0 0 0 0 0 0 0;
make const symbolMap :[str] = "$<color:var(--error-col)>X<$>" " " "$<color:var(--str-col)>O<$>";
make const players   :[str] = "Bot" "Player";

# Game loop
make turn := b0;
loop 9 {
  print "It's now " players[turn int] "'s turn!" str;
  make move :int = -1;
  if turn { # Player moves
    print "Make a valid move [0-8]";
    if TRUE loop {  
      move = inp;
      if move 0 < move 8 > or {
        print "Your move must be between 0 and 8, boundaries included.";
        next;
      }
      if boardData[move] {
        print "Spot " move " on the board is taken!" str;
        next;
      }
      exit;
    }
  }
  else { # Bot moves
    print "Bot is deciding..";
    move = rand 9 * int;
    if boardData[move] loop {
      move++;
      if move 9 == then move = 0;
    }
  }
  
  boardData[move] = 2 turn ? 1 -;

  # Print the board
  make board := "$<display:block; line-height:1rem>";
  make i;
  loop 3 {
    if i then board += "$<color:var(--idle-text-col)>─╋─╋─<$>&EOL";
    loop 3 {
      board +=
        symbolMap[boardData[i] 1 +] "$<color:var(--idle-text-col)>┃<$>" "&EOL"
        i 1 + 3 % not dup not rot> ? swap rot< ? str;
      
      i++;
    }
  }
  print "\clear";
  print board 10 char + "<$>" str;
  
  # Set the score
  make win = FALSE;
  loop 3 with make i, i 3 + { # check rows
    if boardData[i] boardData[i 1 +] boardData[i 2 +] + + 2 ^ 9 == {
      win = TRUE;
      exit;
    }
  }
  
  if win not {
    loop 3 with make i { # check cols
      if boardData[i] boardData[i 3 +] boardData[i 6 +] + + 2 ^ 9 == {
        win = TRUE;
        exit;
      }
    }
  }

  # check diagonals
  if win not boardData[0] boardData[4] boardData[8] + + 2 ^ 9 ==
             boardData[2] boardData[4] boardData[6] + + 2 ^ 9 == or and then win = TRUE;
  
  if win {
    print players[turn int] " won!" +;
    exit;
  };
  turn!!;
}

print "Game is over! Run script to play again.";