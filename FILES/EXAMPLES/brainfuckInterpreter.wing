use "std GList" with lst
make std  = lst.std
make List = lst.List

replace _coerce with 2 * 1 -

make tokens = ">" "<" "." "," "[" "]" "+" "-"

def eval => char {
  when lst.getPos( tokens char ) -1 == { print "Unrecognized token " char str with "error" }
  
  when char dup ">" == swap "<" == or { ptr += char ">" == _coerce }
  when char dup "+" == swap "-" == or { stack[ ptr ] += char "+" == _coerce }
  
  match char {
    when "." { print stack[ ptr ] }
    when "," { stack[ ptr ] = inp }
    when "[" { when stack[ ptr ] not { runID = search( 0 ) } }
    when "]" { when stack[ ptr ]     { runID = search( 1 ) } }
  }
}

def search => n {
  loop loopIDs range with i {
    when loopIDs[ i ][ n ] runID == { exit loopIDs[ i ][ n not ] }
  }
}

make text = "++++++++++[>+++++++>++++++++++>+++>+<<<<-]>++.>+.+++++++.+++.>++.<<+++++++++++++++.>.+++.------.--------.>+.>." spill
make textSize = text range
make stackSize = 100
make stack = lst.fillList( 0 stackSize )
make ptr
make runID

make openLoops = 0 pack
make loopIDs   = 0 pack pack

loop text range with i {
  when text[ i ] "[" == { openLoops = openLoops spill i }
  when text[ i ] "]" == {
    when openLoops range 2 < { print "Error: too many ] for the amount of [ present" with "error" }
    loopIDs[ loopIDs range 1 - ] = openLoops[ openLoops range 1 - ] i pack
    openLoops = openLoops spill drop
  }
}

when loopIDs range 1 > { loopIDs = loopIDs spill rot< drop }

when openLoops type "list" == { print "Error: not enough ] for the amount of [ present" with "error" }

when runID textSize < loop {
  eval( text[ runID ] )
  runID += 1
}