use "std GLib" with std
use "ListObj"

####
macro isVoid expand type "void" ==
####

class Message {
  fun new(text:str, styles:[str]|str|void) {
    make me.text := str
    make me.styles := List()
    when styles isVoid then me.text = text
    else me.writeStyled(text, styles)
  }
  
  fun write(text:str):Message {
    me.text += text
    exit me
  }
  
  fun erase:Message {
    me.text = ""
    exit me
  }
  
  fun addStyle(style:str):Message {
    when [style spill][-1] ";" != then style += ";"
    me.styles.pushItem(style)
    exit me
  }
  
  fun addStyles(dynamic styles:[str]|str):Message {
    when styles type "str" == then styles = [styles]
    loop styles len with i then me.addStyle(styles[i])
    exit me
  }
  
  fun delStyle:Message {
    me.styles.popItem()
    exit me
  }
  
  fun clearStyles:Message {
    me.styles.clear()
    exit me
  }
  
  fun _addStylesToText(styles:str) {
    me.text += "$<" styles ">" str
  }
  
  fun pushStyles(clearAfter:Bool=TRUE):Message {
    me._addStylesToText(me.styles.toStr())
    exit when clearAfter then me.clearStyles() else me # ternary syntax
  }
  
  fun popStyles:Message {
    me.text += "<$>"
    exit me
  }
  
  fun writeStyled(text:str, styles:str|Bool=FALSE):Message {
    when styles FALSE == then me.pushStyles() else me._addStylesToText(styles)
    me.write(text)
    exit me.popStyles()
  }
  
  fun addColor(color:str):Message {
    when color "rainbow" == {
      exit me.addStyle("background: linear-gradient(to right, #ef5350, #f48fb1, #7e57c2, #2196f3, #26c6da, #43a047, #eeff41, #f9a825, #ff5722); -webkit-background-clip: text; -webkit-text-fill-color: transparent;")
    }
    exit me.addStyle("color : " color +)
  }
  
  fun bold:Message => exit me.addStyle("font-weight : bold")
  
  fun italic:Message => exit me.addStyle("font-decoration : italics")
  
  fun writeColored(text:str, color:str):Message {
    me.addColor(color)
    exit me.writeStyled(text)
  }
  
  fun applyStylesInPlace(dynamic text:str, styles:[str]|str):Message {
    text = [text spill]
    when "<" text in not then exit me.write(text)
    when styles type "str" == then styles = [styles]
    loop text len with i {
      me.text += match text[i] with {
        when "<" then "$<" styles[i] ">"
        when ">" then "<$>"
        else text[i]
      }
    }
    exit me
  }
  
  fun send(clearAfter:Bool=TRUE):Message {
    print me.text
    when clearAfter {
      me.erase()
      me.clearStyles()
    }
    exit me
  }
}

# manual way:
print "Hello, $<font-weight:bold; font-decoration:italics; color:green>It$<color:white>a<$>$<color:red>ly<$><$>!"

# using Message:
Message("Hello, ").bold().italic().addColor("green").pushStyles().write("It")
.writeColored("a", "white")
.writeColored("ly", "red").popStyles()
.send()

# using advanced Message methods:
Message().applyStylesInPlace(
  "Hello, <It<a><ly>>!",
  "font-weight:bold; font-decoration:italics; color:green" "color:white" "color:red"
).send()