make EOL = 10 char;
make W := 10;
make H := 8;

make H_SIDE_MAP := "══" "  ";
make V_SIDE_MAP := "║ " "  ";
make MOVES := [W -1 * 2] [1 3] [W 0] [-1 1];
make CORNER_MAP := "╬╣╩╝╠║╚ ╦╗═ ╔   " spill;

make maze :[[int]|void]= [];
loop H W * then make maze[maze spill size] = [0 0 0 0];

make current  := 0;
make currentX := 0;
make currentY := 0;

if TRUE loop {
  # rendering
  make mazeRender := "$<display:block; line-height:1rem;>";
  make bbRender := "";
  make y := 0;
  loop H {
    make topRender := "";
    make bottomRender := "";
    make cellID := 0;
    make cells  := 1 1 1 1;
    make x := 0;
    loop W {
      cellID = y W * x +;
      cells  = maze[cellID][0] maze[cellID][3] 1 1; #bin
      if x then cells[2] = maze[cellID W 1 + -][2];
      if y then cells[3] = maze[cellID W -][3];

      topRender = topRender CORNER_MAP[cells[0] cells[1] 2 * cells[2] 4 * cells[3] 8 * + + +] H_SIDE_MAP[cells[0]] str;
      bottomRender = V_SIDE_MAP[cells[1]] bottomRender swap [" " "$<color:red>#<$>"][cellID current ==] str;
      
      if y H 1 - == {
        bbRender = bbRender CORNER_MAP[2 x not 4 * maze[cellID][3] 8 * + +] H_SIDE_MAP[0] str;
      }
    
      x = x 1 +;
    }
    topRender = topRender CORNER_MAP[1 0 cells[0] 4 * y not 8 * + + +] str;
    bottomRender = bottomRender "║" +;
    mazeRender = mazeRender topRender EOL bottomRender EOL str;
    y = y 1 +;
  }
  print "\clear";
  print mazeRender bbRender "╝<$>" str;

  # advance through the maze
  make moveID :int|str = 0;
  make moveIsVert :int = 0;
  if TRUE loop {
    moveID = inp;
    if moveID "exit" == then exit;
    
    moveIsVert = moveID 2 / dup int ==;
    if moveID dup 0 < swap 3 > or {
      print "Valid moves are: 0:up, 1:right, 2:down, 3:left .";
      next;
    }
    
    if currentX not moveID 3 == and currentX W 1 - == moveID 1 == and or {
      print "Cannot move outside of labyrinth bounds!";
      next;
    }
    
    exit;
  }
  
  if moveID "exit" == then exit;
  make move := MOVES[moveID];
  maze[current][moveID] = 1;
  
  current = current move[0] +;
  currentX = currentX moveIsVert not +;
  currentY = currentY moveIsVert     +;
  
  maze[current][move[1]] = 1;
}

print "Thanks for playing!";